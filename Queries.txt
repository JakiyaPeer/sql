-- Create the customers table
use task;
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    address VARCHAR(255) NOT NULL
);
-- Create the orders table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Create the products table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);
-- Create order_items table to normalize the database
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
-- Insert sample data into customers table
INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john.doe@example.com', '123 Main St'),
('Jane Smith', 'jane.smith@example.com', '456 Maple Ave'),
('Alice Johnson', 'alice.johnson@example.com', '789 Oak St');

-- Insert sample data into products table
INSERT INTO products (name, price, description) VALUES
('Product A', 20.00, 'Description for Product A'),
('Product B', 35.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C');

-- Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, CURDATE(), 55.00),
(2, CURDATE() - INTERVAL 10 DAY, 75.00),
(1, CURDATE() - INTERVAL 40 DAY, 120.00);
-- Insert sample data into order_items table
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 20.00),
(1, 2, 1, 35.00),
(2, 3, 1, 40.00),
(3, 1, 6, 20.00);



-- Get customers who placed orders in the last 30 days
SELECT DISTINCT customers.id, customers.name, customers.email
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;


-- Calculate the total amount of orders for each customer
SELECT customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.id;

-- Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add discount column to products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;


-- Get the top 3 products by price
SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;

-- Get the names of customers who ordered Product A
SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = 'Product A';

-- Join orders and customers to get customer names and order dates
SELECT customers.name, orders.order_date
FROM customers
JOIN orders ON customers.id = orders.customer_id;

-- Get orders where total amount is greater than 150.00
SELECT id, customer_id, total_amount
FROM orders
WHERE total_amount > 150.00;

